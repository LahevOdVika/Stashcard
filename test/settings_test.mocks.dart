// Mocks generated by Mockito 5.4.4 from annotations
// in stashcard/test/settings_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/material.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stashcard/providers/theme_provider.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ThemeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeProvider extends _i1.Mock implements _i2.ThemeProvider {
  MockThemeProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Color get seedColor => (super.noSuchMethod(
        Invocation.getter(#seedColor),
        returnValue: const _i5.Color(0xFF4CAF50),
      ) as _i5.Color);

  @override
  _i5.ThemeData get lightTheme => (super.noSuchMethod(
        Invocation.getter(#lightTheme),
        returnValue: _FakeThemeData_0(
          this,
          Invocation.getter(#lightTheme),
        ),
      ) as _i5.ThemeData);

  @override
  _i5.ThemeData get darkTheme => (super.noSuchMethod(
        Invocation.getter(#darkTheme),
        returnValue: _FakeThemeData_0(
          this,
          Invocation.getter(#darkTheme),
        ),
      ) as _i5.ThemeData);

  @override
  _i5.ThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i5.ThemeMode.system,
      ) as _i5.ThemeMode);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setSeedColor(_i5.Color? color) => super.noSuchMethod(
        Invocation.method(
          #setSeedColor,
          [color],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setThemeMode(_i5.ThemeMode? mode) => super.noSuchMethod(
        Invocation.method(
          #setThemeMode,
          [mode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

class _FakeThemeData_0 extends _i1.SmartFake implements _i5.ThemeData {
  _FakeThemeData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}